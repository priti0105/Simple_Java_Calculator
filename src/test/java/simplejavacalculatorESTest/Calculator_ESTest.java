/*
 * This file was automatically generated by EvoSuite
 * Mon May 23 13:34:50 GMT 2022
 */

package simplejavacalculatorESTest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplejavacalculator.Calculator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(458.49);
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.tan;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals((-6.699154224982155), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.add;
      Double double0 = new Double(458.49);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(916.98, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.add;
      Double double0 = calculator0.calculateBi(calculator_BiOperatorModes0, (Double) null);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      Double double2 = calculator0.calculateEqual(double1);
      assertNull(double2);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.tan;
      Double double0 = new Double(180.0);
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(0.0, (double)double1, 0.01);
      
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.xpowerofy;
      Double double2 = calculator0.calculateBi(calculator_BiOperatorModes0, double1);
      assertEquals(Double.NaN, (double)double2, 0.01);
      
      Double double3 = calculator0.calculateEqual(double0);
      assertEquals(0.0, (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.divide;
      Double double0 = new Double(646.29205);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = new Double((-644.772560241));
      Double double3 = calculator0.calculateEqual(double2);
      assertEquals((-1.0023566290699966), (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.divide;
      Double double0 = new Double(1.0);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = new Double(1.0);
      Double double3 = calculator0.calculateEqual(double2);
      assertEquals(1.0, (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.xpowerofy;
      Double double0 = new Double(671.7);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = calculator0.calculateEqual(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.log;
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.minus;
      Double double0 = new Double(1026.0);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = new Double(0.0);
      Double double3 = calculator0.calculateMono(calculator_MonoOperatorModes0, double2);
      Double double4 = calculator0.calculateBi(calculator_BiOperatorModes0, double3);
      assertEquals(Double.POSITIVE_INFINITY, (double)double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.minus;
      Double double0 = new Double(3001.268488319202);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(0.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.minus;
      Double double0 = new Double(0.0);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = new Double(3381.0);
      Double double3 = calculator0.calculateBi(calculator_BiOperatorModes0, double2);
      assertEquals((-3381.0), (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.rate;
      // Undeclared exception!
      try { 
        calculator0.calculateMono(calculator_MonoOperatorModes0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.minus;
      calculator0.calculateBi(calculator_BiOperatorModes0, (Double) null);
      // Undeclared exception!
      try { 
        calculator0.calculateEqual((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(1.0);
      calculator0.calculateBi((Calculator.BiOperatorModes) null, double0);
      // Undeclared exception!
      try { 
        calculator0.calculateEqual((Double) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.multiply;
      Double double0 = new Double(90.0);
      calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      // Undeclared exception!
      try { 
        calculator0.calculateBi(calculator_BiOperatorModes0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        calculator0.calculateMono((Calculator.MonoOperatorModes) null, double0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.minus;
      Double double0 = calculator0.calculateBi(calculator_BiOperatorModes0, (Double) null);
      assertNotNull(double0);
      
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.abs;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.tan;
      Double double0 = new Double(90.0);
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.tan;
      Double double0 = new Double(180.0);
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      Double double2 = calculator0.calculateMono(calculator_MonoOperatorModes0, double1);
      assertEquals(0.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(3001.268488319202);
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.sin;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.cos;
      Double double0 = calculator0.reset();
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(1393.05831);
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.oneDividedBy;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(7.178450412459763E-4, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(3001.268488319202);
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.squareRoot;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(54.7838341878259, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(666.58192);
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.square;
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(444331.45607088634, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.MonoOperatorModes calculator_MonoOperatorModes0 = Calculator.MonoOperatorModes.tan;
      Double double0 = new Double((-877.171500495142));
      Double double1 = calculator0.calculateMono(calculator_MonoOperatorModes0, double0);
      assertEquals(0.4209467199199487, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double(0.0);
      calculator0.calculateBi((Calculator.BiOperatorModes) null, double0);
      // Undeclared exception!
      try { 
        calculator0.calculateBi((Calculator.BiOperatorModes) null, double0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplejavacalculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Double double0 = new Double((-877.171500495142));
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.xpowerofy;
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      Double double2 = calculator0.calculateEqual(double0);
      assertEquals((double)double2, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.divide;
      Double double0 = new Double(666.58192);
      Calculator.BiOperatorModes calculator_BiOperatorModes1 = Calculator.BiOperatorModes.multiply;
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes1, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(444331.45607088634, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.divide;
      Double double0 = new Double(666.58192);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double double2 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(1.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator.BiOperatorModes calculator_BiOperatorModes0 = Calculator.BiOperatorModes.add;
      Double double0 = new Double(Double.NaN);
      Double double1 = calculator0.calculateBi(calculator_BiOperatorModes0, double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      calculator0.calculateEqual(double1);
      assertEquals((double)double0, (double)double1, 0.01);
  }
}
